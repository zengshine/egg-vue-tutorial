# image: docker:19.03.12

# services:
#   - docker:19.03.12-dind

stages:
  - build
  - deploy

variables:
  DEPLOY_DIR: '/usr/src/egg-vue'
  STATIC_DIR: '/usr/src/egg-vue/public'
  BUILD_PATH: './public'
  APP_PACKAGE_NAME: 'package'
  PACKAGE_MD5: '/package/md5'

  group_name: 'zyh'
  # 定义应用名称
  app_name: 'egg-vue'
  # 定义应用版本
  app_version: '1.0.0'

  # nginx容器名称
  nginx_name: 'cus_nginx'

  # When using dind service, we need to instruct docker to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket. Docker 19.03 does this automatically
  # by setting the DOCKER_HOST in
  # https://github.com/docker-library/docker/blob/d45051476babc297257df490d22cbd806f1b11e4/19.03/docker-entrypoint.sh#L23-L29
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services.
  #
  # Specify to Docker where to create the certificates, Docker will
  # create them automatically on boot, and will create
  # `/certs/client` that will be shared between the service and job
  # container, thanks to volume mount from config.toml
  # ssl 证书文件夹
  DOCKER_TLS_CERTDIR: '/etc/letsencrypt'

before_script:
  - echo "Before script section"
  - docker info

after_script:
  - echo "After script section"

build: # jobs
  image: node:14.15.3-alpine3.12
  stage: build
  only: # 定义在特定的分支上执行该jobs
    - main
  cache: # 配置缓存文件夹，一般用于多个job之间的共享缓存
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
  # artifacts: # 将这个job生成的依赖传递给下一个job, 需要配置dependencies，一般用于将job生成结果与其它job共享
  #   expire_in: 60 mins # 设置过期时间，过期后依赖的数据将会被删除
  #   paths: # 需要传递给下一个job的目录
  #     - node_modules/
  script:
    - echo "========== start install package =========="
    - npm install --registry=https://registry.npm.taobao.org/
    - echo "========== start build =========="
    - npm run build
    - echo "========== after build =========="
    - mkdir -p $DEPLOY_DIR
    - mv $BUILD_PATH/* $DEPLOY_DIR
    - tar zcf $APP_PACKAGE_NAME $DEPLOY_DIR
  tags:
    - egg-vue
  when: manual

deploy: # jobs
  stage: deploy
  only:
    - main
  script:
    - echo "******************** start deploy ********************"

    - echo "******************** Dockerize Web ********************"

    - echo "========== stop & remove container =========="
    - if [ "$(docker ps -a | grep $app_name)" ]; then
    - docker stop $app_name && docker rm $app_name
    - fi
    - echo "========== remove app image =========="
    - if [ "$(docker images | grep $group_name/$app_name:$app_version)" ]; then
    - docker rmi $group_name/$app_name:$app_version
    - fi
    - echo "========== build app image =========="
    - docker build -t $group_name/$app_name:$app_version .
    - echo "========== create app container =========="
    - docker run -dit --name $app_name -p 7001:7001 $group_name/$app_name:$app_version
    - echo "========== copy static file to local machine =========="
    - docker cp $app_name:$STATIC_DIR .
    - ls

    - echo "******************** Dockerize Nginx ********************"

    - echo "========== stop & remove container =========="
    - if [ "$(docker ps -a | grep $nginx_name)" ]; then
    - docker stop $nginx_name && docker rm $nginx_name
    - fi
    - echo "========== remove image =========="
    - if [ "$(docker images | grep $group_name/$nginx_name:$app_version)" ]; then
    - docker rmi $group_name/$nginx_name:$app_version
    - fi
    - echo "========== build image =========="
    - docker build -t $group_name/$nginx_name:$app_version -f nginx/Dockerfile .
    - echo "========== create container =========="
    - >
      docker run --name $nginx_name
      --volume $DOCKER_TLS_CERTDIR:/etc/nginx/certs
      -p 80:80
      -dit
      $group_name/$nginx_name:$app_version
